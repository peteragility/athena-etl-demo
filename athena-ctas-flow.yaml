AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  StringLength:
    Type: String
    Default: 10
  SampleProjectDatabase:
    Type: String
    Default: athena-demo-db-
  SampleProjectBucket:
    Type: String
    Default: athena-demo-etl-
  MyCrawlerName:
    Type: String
    Default: athena-demo-crawler-csv-
  MyCrawlerName2:
    Type: String
    Default: athena-demo-crawler-json-
  SampleProjectWorkGroup:
    Type: String
    Default: athena-demo-workgroup-
  DemoOrderTable:
    Type: String
    Default: demo_order_table
  DemoCallTable:
    Type: String
    Default: demo_call_table  
Resources:
  ###
  # Create a Lambda function that generate a random string
  LambdaForStringGeneration:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt [ LambdaGenerateStringRole, Arn ]
      Code:
        ZipFile:
          !Sub
          - |-
            import random
            import string
            import http.client
            from urllib.parse import urlparse
            import json
            import uuid

            def send_response(request, response, status=None, reason=None):
                if status is not None:
                    response['Status'] = status

                if reason is not None:
                    response['Reason'] = reason

                if 'ResponseURL' in request and request['ResponseURL']:
                    print(request['ResponseURL'])
                    url = urlparse(request['ResponseURL'])
                    body = json.dumps(response)
                    https = http.client.HTTPSConnection(url.hostname)
                    https.request('PUT', url.path+'?'+url.query, body)

                return response

            def lambda_handler(event, context):
                response = {
                    'StackId': event['StackId'],
                    'RequestId': event['RequestId'],
                    'LogicalResourceId': event['LogicalResourceId'],
                    'Status': 'SUCCESS'
                }

                if 'PhysicalResourceId' in event:
                    response['PhysicalResourceId'] = event['PhysicalResourceId']
                else:
                    response['PhysicalResourceId'] = str(uuid.uuid4())

                if event['RequestType'] == 'Delete':
                    return send_response(event, response)

                random_string = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(${stringLength}))

                response['Data'] = {'RandomString': random_string}
                response['Reason'] = 'Successful'
                return send_response(event, response)
          - { stringLength: !Ref StringLength}

      Runtime: "python3.7"
      Timeout: "600"
  LambdaGenerateStringRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  ###
  # Generate a random string
  StringGenerationLambda:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt [ LambdaForStringGeneration, Arn ]
  ###
  # Create a S3 bucket
  LogBucket:
    DependsOn: LambdaForStringGeneration
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - ''
          - - !Ref SampleProjectBucket
            - !GetAtt [ StringGenerationLambda, RandomString ]
  ###
  # Create an AWS Glue database
  GlueDatabase:
    DependsOn: LogBucket
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name:
          Fn::Join:
            - ''
            - - !Ref SampleProjectDatabase
              - !GetAtt [ StringGenerationLambda, RandomString ]
  ###
  # Create an AWS Athena workGroup
  AthenaWorkGroup:
    DependsOn: LogBucket
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Join [ "", [!Ref SampleProjectWorkGroup, !GetAtt [ StringGenerationLambda, RandomString ] ] ]
      State: ENABLED
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: false
        PublishCloudWatchMetricsEnabled: false
        RequesterPaysEnabled: true
        ResultConfiguration:
          OutputLocation: !Join [ "", ["s3://", !Ref LogBucket, "/result" ] ]
  ###
  # Create Glue Custom Classifier
  GlueCsvClassifier:
    Type: AWS::Glue::Classifier
    Properties:
        CsvClassifier: 
            ContainsHeader: PRESENT
            Delimiter: ','
            Name: csvclassify
            QuoteSymbol: '"'

  # Create an AWS Glue crawler (for csv)
  GlueCrawler:
    DependsOn:
          - GlueDatabase
          - GlueCsvClassifier
    Type: AWS::Glue::Crawler
    Properties:
      DatabaseName:
        Fn::Join:
          - ''
          - - !Ref SampleProjectDatabase
            - !GetAtt [ StringGenerationLambda, RandomString ]
      Name:
        Fn::Join:
          - ''
          - - !Ref MyCrawlerName
            - !GetAtt [ StringGenerationLambda, RandomString ]
      Role: !GetAtt [ GlueCrawlerExecutionRole, Arn ]
      Classifiers:
          - !Ref GlueCsvClassifier
      TablePrefix: glue_
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Targets:
        S3Targets:
          - Path: !Join [ "", [ !Ref LogBucket, "/raw" ] ]
  GlueCrawlerExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: GlueCrawlerExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - glue:*
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:GetBucketAcl
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:/aws-glue/*"


  # Create an AWS Glue crawler 2 (for json)
  GlueCrawler2:
    DependsOn:
          - GlueDatabase
    Type: AWS::Glue::Crawler
    Properties:
      DatabaseName:
        Fn::Join:
          - ''
          - - !Ref SampleProjectDatabase
            - !GetAtt [ StringGenerationLambda, RandomString ]
      Name:
        Fn::Join:
          - ''
          - - !Ref MyCrawlerName2
            - !GetAtt [ StringGenerationLambda, RandomString ]
      Role: !GetAtt [ GlueCrawlerExecutionRole, Arn ]
      TablePrefix: glue_
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Targets:
        S3Targets:
          - Path: !Join [ "", [ !Ref LogBucket, "/POC_CH_LOOKUP" ] ]

  ###

  # Creates a lambda function that invokes crawler
  LambdaForInvokingCrawler:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt [ LambaForCrawlerInvocationExecutionRole, Arn ]
      Code:
        ZipFile:
          !Sub
          - |-
            import json
            import boto3
            import time

            MAX_RETRY = 20
            def lambda_handler(event, context):
              client = boto3.client('glue')
              response = client.start_crawler(
                  Name='${crawler}'
              )
              retry_count = 1
              while retry_count < MAX_RETRY:
                  time.sleep(10)
                  crawler_status = client.get_crawler(
                      Name='${crawler}'
                  )
                  crawler_run_status = crawler_status['Crawler']['State']
                  if crawler_run_status == 'READY':
                      break
                  retry_count += 1
              return {
                  'statusCode': 200,
                  'body': json.dumps('Crawler completes')
              }
          - { crawler: !Join [ "", [ !Ref MyCrawlerName, !GetAtt [ StringGenerationLambda, RandomString ] ] ]}

      Runtime: "python3.7"
      Timeout: "600"
  LambdaForInvokingCrawler2:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt [ LambaForCrawlerInvocationExecutionRole, Arn ]
      Code:
        ZipFile:
          !Sub
          - |-
            import json
            import boto3
            import time

            MAX_RETRY = 20
            def lambda_handler(event, context):
              client = boto3.client('glue')
              response = client.start_crawler(
                  Name='${crawler}'
              )
              retry_count = 1
              while retry_count < MAX_RETRY:
                  time.sleep(10)
                  crawler_status = client.get_crawler(
                      Name='${crawler}'
                  )
                  crawler_run_status = crawler_status['Crawler']['State']
                  if crawler_run_status == 'READY':
                      break
                  retry_count += 1
              return {
                  'statusCode': 200,
                  'body': json.dumps('Crawler completes')
              }
          - { crawler: !Join [ "", [ !Ref MyCrawlerName2, !GetAtt [ StringGenerationLambda, RandomString ] ] ]}

      Runtime: "python3.7"
      Timeout: "600"
  LambaForCrawlerInvocationExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambaForCrawlerInvocationExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - glue:StartCrawler
                  - glue:GetCrawler
                Resource: "*"
  ###
  # Create a SNS topic
  SNSTopic:
    Type: AWS::SNS::Topic
  ###
  # Create a Step Functions state machine
  AthenaStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt [ AthenaWorkflowExecutionRole, Arn ]
      DefinitionString:
        !Sub
        - |-
          {
            "StartAt": "Run Glue crawler for csv files",
            "States": {
              "Run Glue crawler for csv files": {
                "Resource": "${crawlerLambda}",
                "Type": "Task",
                "Next": "Run Glue crawler for json files"
              },
              "Run Glue crawler for json files": {
                "Resource": "${crawlerLambda2}",
                "Type": "Task",
                "Next": "Start Athena SQL ETL on order data"
              },
              "Start Athena SQL ETL on order data": {
                "Resource": "arn:${AWS::Partition}:states:::athena:startQueryExecution.sync",
                "Parameters": {
                  "QueryExecutionContext": {
                    "Database": "${database}"
                  },
                  "QueryString": "CREATE table ${orderTable} WITH (format='PARQUET', parquet_compression='SNAPPY', partitioned_by=array['cretn_year','cretn_month'], external_location = '${s3Path}/${orderTable}/') AS select a.order_id, a.cust_num, a.accnt_num, a.subr_num, a.mob_num, a.order_type_cd, a.order_stat, a.shop_num, a.salman_num, a.cretn_date, a.completion_date, a.serv_req_date, a.cancellation_date,b.order_sub_id, b.order_action, b.prod_id, p.prod_name, p.prod_desc, p.prod_type,p.onetime_fee,p.mthly_fee, c.doc_type_cd, c.acq_date, c.cust_type, d.accnt_cretn_date, d.accnt_expiry_date, d.pay_meth_cd, s.salman_name, s.salman_team, k.shop_name, k.shop_addr, k.sal_chl, z.owner_cust_num, z.acq_date as subr_acq_date, year(date_parse(cretn_date,'%m/%d/%Y')) as cretn_year, month(date_parse(cretn_date,'%m/%d/%Y')) as cretn_month from glue_order_header a, glue_order_detail b, glue_cust c, glue_prod p, glue_accnt d, glue_salman s, glue_shop k, glue_subr z where a.order_id = b.order_id and a.cust_num = c.cust_num and b.prod_id = p.prod_id and a.accnt_num = d.accnt_num and a.cust_num = d.cust_num and a.salman_num = s.salman_num and a.shop_num = k.shop_num and a.subr_num = z.subr_num",
                  "WorkGroup": "${workgroup}"
                },
                "Type": "Task",
                "Next": "Get order data ETL results"
              },
              "Get order data ETL results": {
                "Resource": "arn:${AWS::Partition}:states:::athena:getQueryResults",
                "Parameters": {
                  "QueryExecutionId.$": "$.QueryExecution.QueryExecutionId"
                },
                "Type": "Task",
                "Next": "Start Athena SQL ETL on call data"
              },
              "Start Athena SQL ETL on call data": {
                "Resource": "arn:${AWS::Partition}:states:::athena:startQueryExecution.sync",
                "Parameters": {
                  "QueryExecutionContext": {
                    "Database": "${database}"
                  },
                  "QueryString": "CREATE table ${callTable} WITH (format='PARQUET', parquet_compression='SNAPPY', partitioned_by=array['start_year','start_month','start_day'], external_location = '${s3Path}/${callTable}/') AS select a.user_id, a.channel_num, a.duration, b.channel_name, date_parse(a.start_time,'%Y%m%d %H:%i:%s') as start_time,date_parse(b.start_datetime,'%Y%m%d %H:%i:%s') as start_datetime,date_parse(b.end_datetime,'%Y%m%d %H:%i:%s') as end_datetime,year(date_parse(a.start_time,'%Y%m%d %H:%i:%s')) as start_year,month(date_parse(a.start_time,'%Y%m%d %H:%i:%s')) as start_month,day(date_parse(a.start_time,'%Y%m%d %H:%i:%s')) as start_day from glue_poc_tv_cdr_log a left join glue_poc_ch_lookup b on a.CHANNEL_NUM = b.CHANNEL_NUM and date_parse(a.start_time,'%Y%m%d %H:%i:%s') >= date_parse(b.start_datetime,'%Y%m%d %H:%i:%s') and date_parse(a.start_time,'%Y%m%d %H:%i:%s') < date_parse(b.end_datetime,'%Y%m%d %H:%i:%s')",
                  "WorkGroup": "${workgroup}"
                },
                "Type": "Task",
                "Next": "Get call data ETL results"
              },
              "Get call data ETL results": {
                "Resource": "arn:${AWS::Partition}:states:::athena:getQueryResults",
                "Parameters": {
                  "QueryExecutionId.$": "$.QueryExecution.QueryExecutionId"
                },
                "Type": "Task",
                "Next": "Alert user ETL is completed"
              },
              "Alert user ETL is completed": {
                "Resource": "arn:${AWS::Partition}:states:::sns:publish",
                "Parameters": {
                  "TopicArn": "${snsTopicArn}",
                  "Message": {
                    "Input": "SQL ETL via Athena Completed!"
                  }
                },
                "Type": "Task",
                "End": true
              }
            }
          }
        - {orderTable: !Ref DemoOrderTable, callTable: !Ref DemoCallTable, snsTopicArn: !Ref SNSTopic, database: !Ref GlueDatabase, crawlerLambda: !GetAtt [ LambdaForInvokingCrawler, Arn ], crawlerLambda2: !GetAtt [ LambdaForInvokingCrawler2, Arn ], workgroup: !Ref AthenaWorkGroup, s3Path: !Join [ "", ["s3://", !Ref LogBucket, "/curated" ]]}
  AthenaWorkflowExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: AthenaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt [ LambdaForInvokingCrawler, Arn ]
                  - !GetAtt [ LambdaForInvokingCrawler2, Arn ]
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref SNSTopic
              - Effect: Allow
                Action:
                  - athena:getQueryResults
                  - athena:startQueryExecution
                  - athena:stopQueryExecution
                  - athena:getQueryExecution
                  - athena:getDataCatalog
                Resource:
                  - !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${AthenaWorkGroup}"
                  - !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/*"
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                  - s3:CreateBucket
                  - s3:PutObject
                Resource: !Sub "arn:${AWS::Partition}:s3:::*"
              - Effect: Allow
                Action:
                  - glue:CreateDatabase
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:UpdateDatabase
                  - glue:DeleteDatabase
                  - glue:CreateTable
                  - glue:UpdateTable
                  - glue:GetTable
                  - glue:GetTables
                  - glue:DeleteTable
                  - glue:BatchDeleteTable
                  - glue:BatchCreatePartition
                  - glue:CreatePartition
                  - glue:UpdatePartition
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:BatchGetPartition
                  - glue:DeletePartition
                  - glue:BatchDeletePartition
                Resource:
                  - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/*"
                  - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/*"
                  - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
Outputs:
  StateMachineArn:
    Value: !Ref AthenaStateMachine
  ExecutionInput:
    Description: Sample input to StartExecution.
    Value:
      >
      {}
